{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/repo/users-repo.js","webpack:///./src/service/global-settings.services.js","webpack:///./src/domain/connect-agent.domain.js","webpack:///./src/errors/agent.errors.js","webpack:///./src/service/connect-agent.service.js","webpack:///./src/handler/voicemail.js","webpack:///./src/domain/connect-user.domain.js","webpack:///./src/service/connect.service.js","webpack:///./src/domain/global-settings.domain.js","webpack:///./src/repo/global-repo.js","webpack:///./src/errors/standard.errors.js","webpack:///./src/repo/voicemail.repo.js","webpack:///./src/service/notification.service.js","webpack:///external \"nodemailer\"","webpack:///./src/service/s3.service.js","webpack:///./src/service/transcription.service.js","webpack:///external \"request-promise\"","webpack:///./src/domain/voicemail.domain.js","webpack:///./src/service/voicemail.service.js","webpack:///external \"aws-sdk\"","webpack:///./src/lib/dynamo.js","webpack:///./src/domain/agent.domain.js","webpack:///external \"awesome-phonenumber\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","UsersRepo","this","dynamo","process","env","USERS_TABLE_NAME","amazonConnectInstanceId","AMAZON_CONNECT_INSTANCE_ARN","extension","params","IndexName","KeyConditionExpression","ExpressionAttributeValues","query","then","items","length","userId","Key","agentId","getItem","item","next","size","param","Limit","Select","ExclusiveStartKey","JSON","parse","Buffer","from","toString","scanWithNext","scan","agent","data","Item","createAgentData","put","deliverSMSPhoneNumber","deliverSMS","deliverEmail","encryptVoicemail","transcribeVoicemail","expressionAttrValues","email","sms","enabled","phoneNumber","updateExpression","UpdateExpression","update","values","batchWrite","GlobalSettingsService","globalRepo","getGlobalSettings","transcribe","encrypt","deliveryEmail","availableSMSCountries","updateGlobalSettings","result","console","log","stringify","Attributes","createGlobalSettings","DELIVERY_EMAIL","ConnectAgent","connectUser","super","connectService","usersRepo","getAgentByExtension","getConnectUser","user","getAgentByUserId","getAgents","Promise","all","listConnectUsers","getAllAgents","connectUsers","dbUsers","needUpdate","forEach","found","find","dbUser","Id","username","Username","push","PutRequest","createAgentCreateParam","DeleteRequest","createAgentDeleteParam","_validateAgentUpdate","createAgentIfNeeded","updateAgentById","getConnectAgentByUserId","createAgentPromise","createAgent","resolve","reject","undefined","phone","isValid","getNumber","Number","isNaN","AWS","voicemailService","stream","async","event","context","Records","promises","map","record","eventName","newRecord","DynamoDB","Converter","unmarshall","dynamodb","NewImage","oldRecord","OldImage","processVoicemailRecords","lambdaResult","err","error","ConnectUser","userMap","detail","arn","firstName","lastName","phoneType","autoAccept","deskPhoneNumber","directoryUserId","routingProfileId","instanceId","split","connect","Connect","maxBackOffTime","users","InstanceId","UserId","describeUser","User","_listConnectUsers","list","nextToken","retry","MaxResults","listUsers","promise","UserSummaryList","NextToken","concat","catch","warn","Math","min","pow","setTimeout","GlobalSettings","globalSettingsMap","AVAILABLE_SMS_COUNTRIES","GLOBAL_TABLE_NAME","amazonConnectInstanceArn","instanceArn","settings","_updateGlobalSettings","GenericError","Error","message","developerMessage","MissingParameterError","parameter","InvalidParameterError","MissingParametersError","ContactVoicemailRepo","CONTACT_VOICEMAIL_TABLE_NAME","contactId","timestamp","status","queryParam","queryResult","readerId","DeliveryOptionSettings","DeliveryContent","transcription","preSignedUrl","audioFile","NotificationService","s3Service","transcriptionService","ses","SES","sns","SNS","transporter","createTransport","recordingExpiration","parseInt","SIGNED_RECORDING_URL_EXP","globalSettings","voicemail","connectAgent","options","getTranscribeAndEncryptionSettings","deliveryOptions","shouldSendEmail","shouldSendSMS","contactEmail","agentSMSPhoneNumber","getDeliveryContents","contents","sendTextMessage","sendMail","transcriptionPromise","preSignedUrlPromise","audioFilePromise","getPreSignedUrl","recordingBucketName","recordingObjectKey","getFile","jobName","getTranscriptJobName","getTranscriptForJobName","fromEmailAddress","toEmailAddress","deliveryContent","html","Date","contactPhoneNumber","transcripts","transcript","floor","now","expires","url","mailOptions","subject","to","filename","content","Body","info","deliveryPhoneNumber","Message","PhoneNumber","publish","shouldTranscribe","shouldEncrypt","require","S3Service","secretsManager","SecretsManager","getAWSCredentials","getSecretValue","SecretId","SECRET_ARN","res","isTempToken","secret","SecretString","jsonParsed","accessKeyId","secretAccessKey","s3","S3","signatureVersion","credentials","bucket","Bucket","getObject","Expires","getSignedUrl","TranscriptionService","TranscribeService","TranscriptionJobName","getTranscriptionJob","transcriptionJob","method","uri","TranscriptionJob","Transcript","TranscriptFileUri","json","results","ContactVoicemail","voicemailMap","transcribeStatus","recordingUrl","recordingBucketRegion","voicemailRepo","agentService","notificationService","globalSettingsService","jobNameSplit","updateTranscriptionStatus","newVoicemail","_deliver","getSettings","deliver","DynamoDBService","tableName","client","DocumentClient","Items","allItems","LastEvaluatedKey","callback","batch","startingIndex","_batchWrite","index","nextData","endIndex","batchToUpdate","slice","batchParam","RequestItems","Agent","agentMap"],"mappings":"6DACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,M,kCClFrD,oDAgBA,MAAMC,EAEF,cACIC,KAAKC,OAAS,IAAI,IAAgBC,QAAQC,IAAIC,kBAC9CJ,KAAKK,wBAA0BH,QAAQC,IAAIG,4BAO/C,oBAAoBC,GAChB,IAAIC,EAAS,CACTC,UAAW,sBACXC,uBAAwB,mBACxBC,0BAA2B,CACvB,OAAQJ,IAGhB,OAAOP,KAAKC,OAAOW,MAAMJ,GACpBK,KAAKC,GACKA,EAAMC,OAAS,EAAI,IAAI,IAAMD,EAAM,IAAM,MAI5D,iBAAiBE,GACb,IAAIR,EAAS,CACTS,IAAK,CACDC,QAASF,IAGjB,OAAOhB,KAAKC,OAAOkB,QAAQX,GAAQK,KAAKO,GAC7BA,EAAO,IAAI,IAAMA,GAAQ,MAIxC,UAAUC,EAAMC,GACZ,IAAIC,EAAQ,CACRC,MAAOF,GAAQ,IACfG,OAAQ,kBAOZ,OAJIJ,IACAE,EAAMG,kBAAoBC,KAAKC,MAAMC,OAAOC,KAAKT,EAAM,UAAUU,SAAS,WAGvE/B,KAAKC,OACP+B,aAAaT,GAGtB,eACI,OAAOvB,KAAKC,OACPgC,KAAK,CACFR,OAAQ,mBAIpB,uBAAuBS,GACnB,IAAIC,EAAO,CACPC,KAAM,IACCF,EACHhB,QAASgB,EAAMlB,SAOvB,MAJwB,KAApBkB,EAAM3B,kBACC4B,EAAKC,KAAK7B,UAGd4B,EAGX,uBAAuBD,GACnB,MAAO,CACHjB,IAAK,CACDC,QAASgB,EAAMlB,SAK3B,YAAYkB,GACR,IAAI1B,EAASR,KAAKqC,gBAAgBH,GAClC,OAAOlC,KAAKC,OAAOqC,IAAI9B,GAG3B,gBAAgBU,GAAS,UAACX,EAAS,sBAAEgC,EAAqB,WAAEC,EAAU,aAAEC,EAAY,iBAAEC,EAAgB,oBAAEC,IACpG,IAAIC,EAAuB,CACvB,MAAOD,IAAuB,EAC9B,MAAOD,IAAoB,EAC3B,MAAOD,EACP,MAAO,CACHI,MAAOJ,EACPK,IAAK,CACDC,QAASP,EACTQ,YAAuC,KAA1BT,EAA+B,OAASA,KAM/C,OAAdhC,GAAoC,KAAdA,IACtBqC,EAAqB,QAAUrC,GAEnC,IAAI0C,EAAmB,kGACoBA,GAA5B,OAAd1C,GAAoC,KAAdA,EAAwC,oBAA0C,qBAEzG,IAAIC,EAAS,CACTS,IAAK,CACDC,QAASA,GAEbP,0BAA2BiC,EAC3BM,iBAAkBD,GAEtB,OAAOjD,KAAKC,OAAOkD,OAAO3C,GAG9B,WAAW4C,GACP,OAAOpD,KAAKC,OAAOoD,WAAWD,EAAQ,M,gCCpI9C,kCAaA,MAAME,EAEF,YAAYC,GACRvD,KAAKuD,WAAaA,EAGtB,cACI,OAAOvD,KAAKuD,WAAWC,oBAG3B,OAAOC,EAAYC,EAASC,EAAeC,GACvC,OAAO5D,KAAKuD,WAAWM,qBAAqBJ,EAAYC,EAASC,EAAeC,GAC3E/C,KAAKiD,IACFC,QAAQC,IAAI,WAAarC,KAAKsC,UAAUH,IACxC,IAAI,oBAACnB,EAAmB,iBAAED,EAAgB,cAAEiB,EAAa,sBAAEC,GAAyBE,EAAOI,WAC3F,MAAO,CACHvB,sBACAD,mBACAiB,gBACAC,2BAKhB,gBACI,OAAO5D,KAAKuD,WAAWY,sBAAqB,GAAM,EAAMjE,QAAQC,IAAIiE,mB,kECzB5E,MAAMC,EAMF,YAAYnC,EAAOoC,GACftE,KAAKgB,OAASkB,EAAMlB,OACpBhB,KAAKkC,MAAQA,EACblC,KAAKsE,YAAcA,G,kBCPgB,IAU3C,MAAM,UAA4B,IAC9B,YAAY/D,GACRgE,MACI,sBACA,yEACA,oEAAoEhE,I,oBCLhF,MAAM,EAEF,YAAYiE,EAAgBC,GACxBzE,KAAKyE,UAAYA,EACjBzE,KAAKwE,eAAiBA,EAO1B,2BAA2BjE,GACvB,OAAOP,KAAKyE,UAAUC,oBAAoBnE,GACrCM,KAAKqB,GAASlC,KAAKwE,eAAeG,eAAezC,EAAMlB,QACnDH,KAAKyD,GAAe,IAAID,EAAanC,EAAOoC,KAOzD,wBAAwBtD,GACpB,OAAOhB,KAAKwE,eAAeG,eAAe3D,GACrCH,KAAK+D,GAAQ5E,KAAKyE,UAAUI,iBAAiB7D,GACzCH,KAAKqB,GAAS,IAAImC,EAAanC,EAAO0C,KAMnD,iBAAiBvD,EAAMC,GACnB,OAAOtB,KAAKyE,UAAUK,UAAUzD,EAAMC,GAG1C,oBAEI,OAAOyD,QAAQC,IAAI,CAAChF,KAAKwE,eAAeS,mBAAoBjF,KAAKyE,UAAUS,iBACtErE,KAAKuC,IACF,IAAK+B,EAAcC,GAAWhC,EAC1BiC,EAAa,GA2BjB,GAzBAF,EAAaG,QAAQhB,IACjB,MAAMiB,EAAQH,EAAQI,KAAKC,GAAUA,EAAOzE,SAAWsD,EAAYoB,IACnE,IAAIxD,EACAqD,GAASA,EAAMI,WAAarB,EAAYsB,UACxC1D,EAAQ,IACDqD,EACHI,SAAUrB,EAAYsB,UAE1BP,EAAWQ,KAAK,CAACC,WAAW9F,KAAKyE,UAAUsB,uBAAuB7D,MAC1DqD,IACRrD,EAAQ,CACJlB,OAAQsD,EAAYoB,GACpBC,SAAUrB,EAAYsB,UAE1BP,EAAWQ,KAAK,CAACC,WAAY9F,KAAKyE,UAAUsB,uBAAuB7D,QAI3EkD,EAAQE,QAAQG,IACEN,EAAaK,KAAKlB,GAAeA,EAAYoB,KAAOD,EAAOzE,SAErEqE,EAAWQ,KAAK,CAACG,cAAehG,KAAKyE,UAAUwB,uBAAuBR,OAI3EJ,EAAWtE,OAAS,EACnB,OAAOf,KAAKyE,UAAUpB,WAAWgC,KAKjD,gBAAgBnE,EAASiC,GACrB,OAAOnD,KAAKkG,qBAAqBhF,EAASiC,GACrCtC,KAAK,IAAMb,KAAKmG,oBAAoBjF,EAASiC,EAAO5C,YACpDM,KAAK,IAAMb,KAAKyE,UAAU2B,gBAAgBlF,EAASiC,IACnDtC,KAAK,IAAMb,KAAKqG,wBAAwBnF,IAGjD,oBAAoBA,EAASX,GACzB,IAAI+F,EAAqBtG,KAAKyE,UAAUI,iBAAiB3D,GAASL,KAAKqB,GACrD,OAAVA,EAAuBlC,KAAKyE,UAAU8B,YAAY,IAAMlH,OAAO6B,EAASX,IACrE2B,GAEX,OAAI3B,EACOP,KAAKyE,UAAUC,oBAAoBnE,GACrCM,KAAKqB,IACF,GAAa,MAATA,GAAiBA,EAAMlB,SAAWE,EAClC,MAAM,IAAI,EAAoBX,GAElC,OAAO2B,IACRrB,KAAK,IAAMyF,GAEXA,EAIf,qBAAqBpF,EAASiC,GAC1B,OAAO,IAAI4B,QAAQ,CAACyB,EAASC,KACzB,IAAI,UAAClG,EAAS,sBAAEgC,EAAqB,WAAEC,EAAU,aAAEC,EAAY,iBAAEC,EAAgB,oBAAEC,GAAuBQ,EAC1G,GAAKjC,EAKL,IAAmB,IAAfsB,QAAkDkE,IAA1BnE,GAAiE,KAA1BA,EAAnE,CAOA,GAAIA,EAAuB,CACvB,IAAIoE,EAAQ,IAAI,IAAYpE,GACvBoE,EAAMC,UAOPzD,EAA8B,sBAAIwD,EAAME,YANxCJ,EAAO,IAAI,IACP,0BACA,gGACA,wCAAwClE,IAOhDY,EAAOvD,eAAe,eACrBuD,EAAkB,UAAEpC,OAAS,GAAK+F,OAAOC,MAAM5D,EAAkB,YAClEsD,EAAO,IAAI,IAAsB,2BAA4B,6DAI5DtD,EAAOvD,eAAe,cACtBuD,EAAOvD,eAAe,eACtBuD,EAAOvD,eAAe,iBACtBuD,EAAOvD,eAAe,wBACtBuD,EAAOvD,eAAe,oBAM3B4G,EAAQ,CACJtF,UACAiC,WANAsD,EAAO,IAAI,UA/BXA,EAAO,IAAI,IACP,iDACA,6EAPJA,EAAO,IAAI,IAAsB,iB,kCC9HjD,2FAeA,MAAMO,EAAM,EAAQ,GAYdvC,EAAY,IAAI,IAChBlB,EAAa,IAAI,IACjB0D,EAAmB,IAAI,IACzB,IAAI,IACJ,IAAI,IAAoB,IAAI,IAAkBxC,GAC9C,IAAI,IAAoB,IAAI,IAAa,IAAI,KAC7C,IAAI,IAAsBlB,IAG9B1F,QAAQqJ,OAASC,MAAOC,EAAOC,KAC3B,IAAI,QAACC,GAAWF,EACZG,EAAWD,EAAQE,IAAIL,MAAOM,IAC9B,IAAIC,EAAYD,EAAOC,UACnBC,EAAYX,EAAIY,SAASC,UAAUC,WAAWL,EAAOM,SAASC,UAC9DC,EAAYjB,EAAIY,SAASC,UAAUC,WAAWL,EAAOM,SAASG,UAClE,aAAajB,EAAiBkB,wBAAwBT,EAAWC,EAAWM,KAGhF,UACuBlD,QAAQC,IAAIuC,GAC/B,MAAO,CACHa,aAAc,WAEpB,MAAOC,GAEL,OADAtE,QAAQC,IAAIqE,GACL,CACHC,MAAOD,M,kECxCnB,MAAME,EAEF,YAAYC,EAASC,GAAS,GAC1BzI,KAAKgB,OAASwH,EAAY,GAC1BxI,KAAK0I,IAAMF,EAAa,IACxBxI,KAAK2F,SAAW6C,EAAkB,SAE7BC,IAILzI,KAAK2I,UAAYH,EAAsB,aAAa,UACpDxI,KAAK4I,SAAWJ,EAAsB,aAAY,SAClDxI,KAAK6C,MAAQ2F,EAAsB,aAAS,MAExCA,EAAQ5I,eAAe,gBACvBI,KAAK6I,UAAYL,EAAqB,YAAa,UACnDxI,KAAK8I,WAAaN,EAAqB,YAAc,WACrDxI,KAAK+I,gBAAkBP,EAAqB,YAAmB,kBAE/DxI,KAAK6I,UAAY,KACjB7I,KAAK8I,WAAa,KAClB9I,KAAK+I,gBAAkB,MAG3B/I,KAAKgJ,gBAAkBR,EAAyB,gBAChDxI,KAAKiJ,iBAAmBT,EAA0B,kBAGtD,cACI,MAAO,GAAGxI,KAAK2I,aAAa3I,KAAK4I,YC5BzC,MAAM5B,EAAM,EAAQ,GAGpB,MAAM,EAEF,cACIhH,KAAKkJ,WAAahJ,QAAQC,IAAIG,4BAA4B6I,MAAM,KAAK,GACrEnJ,KAAKoJ,QAAU,IAAIpC,EAAIqC,QAGvBrJ,KAAKsJ,eAAiB,GAO1B,kBACI,OAAOtJ,KAAKiF,mBACPpE,KAAK0I,IACF,IAAIhC,EAAWgC,EAAM/B,IAAI5C,GAAQ5E,KAAK2E,eAAeC,EAAKc,KAC1D,OAAOX,QAAQC,IAAIuC,KAS/B,eAAevG,GACX,OAAO,IAAI+D,QAAQ,CAACyB,EAASC,KACzB,IAAIjG,EAAS,CACTgJ,WAAYxJ,KAAKkJ,WACjBO,OAAQzI,GAEZhB,KAAKoJ,QAAQM,aAAalJ,EAAQ,CAAC6H,EAAKlG,IAChCkG,GACAtE,QAAQC,IAAI,QAASqE,QACrB5B,EAAO4B,IAGNlG,OAKLqE,EAAQ,IAAI+B,EAAYpG,EAAKwH,QAJzB5F,QAAQC,IAAI,sBACZyC,EAAO4B,OAQvB,mBACI,OAAOrI,KAAK4J,kBAAkB,GAAI,KAAM,GAI5C,kBAAkBC,EAAMC,EAAWC,GAC/B,IAAIvJ,EAAS,CACTgJ,WAAYxJ,KAAKkJ,WACjBc,WAAY,KAMhB,OAJIF,IACAtJ,EAAkB,UAAIsJ,GAGnB9J,KAAKoJ,QAAQa,UAAUzJ,GACzB0J,UACArJ,KAAKsB,IACF,IAAI,gBAACgI,EAAe,UAAEC,GAAajI,EAC/BoH,EAAQM,EAAKQ,OAAOF,GACxB,OAAIC,EACOpK,KAAK4J,kBAAkBL,EAAOa,EAAW,GAEzCb,IAGde,MAAMjC,IAEH,GADAtE,QAAQwG,KAAK,oCAAsCR,EAAO1B,GACtD0B,EAAQ,EACR,MAAM1B,EAGV,OAlFFpJ,EAkFeuL,KAAKC,IAAID,KAAKE,IAAIX,EAAO,GAAI/J,KAAKsJ,gBAlF5C,IAAIvE,QAAQyB,GAAWmE,WAAWnE,EAASvH,KAmFzC4B,KAAK,IACKb,KAAK4J,kBAAkBC,EAAMC,EAAWC,EAAQ,IApFjE9K,W,6ECHd,MAAM2L,EAEF,YAAYC,GACR7K,KAAK2C,oBAAsBkI,EAAuC,sBAAK,EACvE7K,KAAK0C,iBAAmBmI,EAAoC,mBAAK,EACjE7K,KAAK2D,cAAgBkH,EAAiC,eAAK,KAC3D7K,KAAK4D,sBAAwBiH,EAAyC,wBAAM3K,QAAQC,IAAI2K,yBAA2B,IAAI3B,MAAM,MCHrI,MAAM,EAEF,cACInJ,KAAKC,OAAS,IAAI,IAAgBC,QAAQC,IAAI4K,mBAC9C/K,KAAKgL,yBAA2B9K,QAAQC,IAAIG,4BAGhD,oBACIyD,QAAQC,IAAI,2BACZ,IAAIxD,EAAS,CACTS,IAAK,CACDgK,YAAajL,KAAKgL,2BAG1B,OAAOhL,KAAKC,OAAOkB,QAAQX,GAAQK,KAAKO,GAC7BA,EAAO,IAAIwJ,EAAexJ,GAAQ,MAIjD,qBAAqBuB,EAAqBD,EAAkBiB,EAAeC,GACvE,IAAIsH,EAAW,IAAIN,EAAe,CAACjI,sBAAqBD,mBAAkBiB,gBAAeC,0BACzFsH,EAASD,YAAcjL,KAAKgL,yBAC5B,IAAIxK,EAAS,CACT4B,KAAM8I,GAGV,OADAnH,QAAQC,IAAI,cACLhE,KAAKC,OAAOqC,IAAI9B,GAAQK,KAAK,IAAMqK,GAG9C,qBAAqBvI,EAAqBD,EAAkBiB,EAAeC,GACvE,OAAO5D,KAAKwD,oBAAoB3C,KAAKqK,GAC7BA,EACOlL,KAAKmL,sBAAsBxI,EAAqBD,EAAkBiB,EAAeC,IAExFG,QAAQC,IAAI,aACLhE,KAAKmE,qBAAqBxB,EAAqBD,EAAkBiB,EAAeC,KAKnG,sBAAsBjB,EAAqBD,EAAkBiB,EAAeC,GACxE,IAAIpD,EAAS,CACTS,IAAK,CACDgK,YAAajL,KAAKgL,0BAEtBrK,0BAA2B,CACvB,MAAOgC,EACP,MAAOD,EACP,MAAOiB,EACP,MAAOC,GAEXV,iBAAkB,mGAEtB,OAAOlD,KAAKC,OAAOkD,OAAO3C,M,+BCrElC,wIAaA,MAAM4K,UAAqBC,MACvB,YAAY/M,EAAMgN,EAASC,GACvBhH,QACAvE,KAAKsL,QAAUA,EACftL,KAAKuL,iBAAmBA,EACxBvL,KAAK1B,KAAOA,GAIpB,MAAMkN,UAA8BJ,EAChC,YAAYK,GACRlH,MACI,wBACA,oBACA,sBAAsBkH,IAKlC,MAAMC,UAA8BN,EAChC,YAAYE,EAASC,GACjBhH,MACI,6BACA+G,EACAC,IAKZ,MAAMI,UAA+BP,EACjC,cACI7G,MACI,yBACA,qCACA,4F,gCC/CZ,6CAeA,MAAMqH,EAEF,cACI5L,KAAKC,OAAS,IAAI,IAAgBC,QAAQC,IAAI0L,8BAGlD,0BAA0BC,EAAWC,EAAWC,GAI5C,IAAIC,EAAa,CACbvL,uBAAwB,yBACxBC,0BAA2B,CACvB,aAAcmL,IAItB,OAAO/G,QAAQC,IAAI,CAAChF,KAAKC,OAAOW,MAAMqL,KACjCpL,KAAKuC,IAEF,IAAImE,EAAW,GAef,OAdAnE,EAAO,GAAGoE,IAAI0E,IACV,IAAI1L,EAAS,CACTS,IAAK,CACD,UAAa6K,EACb,SAAYI,EAAYC,UAE5BxL,0BAA2B,CACvB,UAAWqL,GAEf9I,iBAAkB,kCAEtBqE,EAAS1B,KAAK7F,KAAKC,OAAOkD,OAAO3C,MAG9BuE,QAAQC,IAAIuC,Q,gCClDnC,uDAaA,MAAMP,EAAM,EAAQ,GAIpB,MAAMoF,EACF,YAAY3I,EAAYC,GACpB1D,KAAKyD,WAAaA,EAClBzD,KAAK0D,QAAUA,GAIvB,MAAM2I,EACF,YAAYC,EAAeC,EAAcC,GACrCxM,KAAKsM,cAAgBA,EACrBtM,KAAKuM,aAAeA,EACpBvM,KAAKwM,UAAYA,GAIzB,MAAMC,EAEF,YAAYC,EAAWC,GACnB3M,KAAK0M,UAAYA,EACjB1M,KAAK2M,qBAAuBA,EAC5B3M,KAAK4M,IAAM,IAAI5F,EAAI6F,IACnB7M,KAAK8M,IAAM,IAAI9F,EAAI+F,IACnB/M,KAAKgN,YAAc,IAAWC,gBAAgB,CAACJ,IAAK7M,KAAK4M,MACzD5M,KAAKkN,oBAAsBC,SAASjN,QAAQC,IAAIiN,0BAUpD,QAAQC,EAAgBC,EAAWC,GAC/B,IAAIC,EAAUxN,KAAKyN,mCAAmCJ,EAAgBC,GAClEI,EAAkBH,EAAarL,MAAMwL,gBACrCC,EAAkBD,EAAgB7K,MAClC+K,EAAgBF,EAAgB5K,IAAIC,QACpC8K,EAAeN,EAAajJ,YAAYzB,OAAS0K,EAAajJ,YAAYqB,SAC1EmI,EAAsBJ,EAAgB5K,IAAIE,YAC1CW,EAAgB0J,EAAe1J,cAEnC,IAAKA,EACD,KAAM,oCAGV,OAAKgK,GAAoBC,EAIjBD,GAAmBC,GACnB7J,QAAQC,IAAI,kCACLhE,KAAK+N,oBAAoBP,EAASF,GAAWzM,KAAKmN,GAC9ChO,KAAKiO,gBAAgBX,EAAWQ,EAAqBE,GACvDnN,KAAK,IAAMb,KAAKkO,SAASZ,EAAW3J,EAAekK,EAAcG,MAEnEJ,GAAiBE,GACxB/J,QAAQC,IAAI,iBACLhE,KAAK+N,oBAAoBP,EAASF,GAAWzM,KAAKmN,GAC9ChO,KAAKiO,gBAAgBX,EAAWQ,EAAqBE,KAEzDN,EAAgB7K,OACvBkB,QAAQC,IAAI,mBACLhE,KAAK+N,oBAAoBP,EAASF,GAAWzM,KAAKmN,GAC9ChO,KAAKkO,SAASZ,EAAW3J,EAAekK,EAAcG,KAG1DjJ,QAAQyB,QAAQ,CAAC8E,QAAS,mBApBrCvH,QAAQC,IAAI,4BACLe,QAAQyB,QAAQ,CAAC8E,QAAS,8BA6BzC,oBAAoBkC,EAASF,GACzBvJ,QAAQC,IAAI,6BAEZ,IAAImK,EAAuBpJ,QAAQyB,QAAQ,MACvC4H,EAAsBrJ,QAAQyB,QAAQ,MACtC6H,EAAmBtJ,QAAQyB,QAAQ,MAUvC,GARIgH,EAAQ9J,SACRK,QAAQC,IAAI,cACZoK,EAAsBpO,KAAK0M,UAAU4B,gBAAgBhB,EAAUiB,oBAAqBjB,EAAUkB,mBAAoBxO,KAAKkN,uBAEvHnJ,QAAQC,IAAI,kBACZqK,EAAmBrO,KAAK0M,UAAU+B,QAAQnB,EAAUiB,oBAAqBjB,EAAUkB,qBAGnFhB,EAAQ/J,WAAY,CACpBM,QAAQC,IAAI,iBACZ,IAAI0K,EAAUpB,EAAUqB,uBACxBR,EAAuBnO,KAAK2M,qBAAqBiC,wBAAwBF,GAG7E,OAAO3J,QACFC,IAAI,CAACmJ,EAAsBC,EAAqBC,IAChDxN,KAAKiD,IACF,IAAIwI,EAAgBxI,EAAO,GACvByI,EAAezI,EAAO,GACtB0I,EAAY1I,EAAO,GACvB,OAAO,IAAIuI,EAAgBC,EAAeC,EAAcC,KAWpE,SAASc,EAAWuB,EAAkBC,EAAgBC,GAClD,OAAO,IAAIhK,QAAQ,CAACyB,EAASC,KACzB,IAGIuI,EAAO,MAHS,IAAIC,KAA2B,IAAtB3B,EAAUvB,iBAavC,GATAiD,GAAQ,yBAAyB1B,EAAU4B,0BAGvCH,EAAgBzC,gBAChB0C,GAAQ,kCAAkCD,EAAgBzC,cAAc6C,YAAY,GAAGC,kBAI3FJ,GAAQ,oBACJD,EAAgBxC,aAAc,CAG9ByC,GAAQ,iCADa,IAAIC,KAA8E,IAAzEzE,KAAK6E,MAAOJ,KAAKK,MAAQ,IAAQP,EAAgBxC,aAAagD,gBAK5FP,GADgB,eAAeD,EAAgBxC,aAAaiD,qDAIhE,IAAIC,EAAc,CACd3N,KAAM+M,EACNa,QAAS,sBAAsBpC,EAAU4B,mBACzCF,OACAW,GAAIb,GAIJC,EAAgBvC,YAChBiD,EAAyB,YAAI,CAAC,CAC1BG,SAAU,gBACVC,QAASd,EAAgBvC,UAAUsD,QAI3C9P,KAAKgN,YAAYkB,SAASuB,EAAa,CAACpH,EAAK0H,KACzC,GAAI1H,EAGA,OAFAtE,QAAQC,IAAIqE,QACZ5B,EAAO4B,GAGX7B,EAAQuJ,OAWpB,gBAAgBzC,EAAW0C,EAAqBjB,GAC5C,OAAO,IAAIhK,QAAQ,CAACyB,EAASC,KAEzB,IAAI6E,EAAU,iCAAiCgC,EAAU4B,uBAOzD,GAJIH,EAAgBzC,gBAChBhB,GAAW,kBAAkByD,EAAgBzC,cAAc6C,YAAY,GAAGC,iBAG1EL,EAAgBxC,aAAc,CAG9BjB,GAAW,gCADU,IAAI2D,KAA8E,IAAzEzE,KAAK6E,MAAOJ,KAAKK,MAAQ,IAAQP,EAAgBxC,aAAagD,cAK5FjE,GADgB,GAAGyD,EAAgBxC,aAAaiD,IAIpD,IAAIhP,EAAS,CACTyP,QAAS3E,EACT4E,YAAaF,GAGjBhQ,KAAK8M,IAAIqD,QAAQ3P,EAAQ,CAAC6H,EAAKlG,KACvBkG,GACAtE,QAAQC,IAAI,UAAUqE,GAE1B7B,EAAQrE,OAYpB,mCAAmCkL,EAAgBC,GAC/C,IAAI7J,GAAa,EACbC,GAAU,EAUd,OAR2C,IAAvC2J,EAAe1K,sBACfc,EAAa6J,EAAU8C,mBAGa,IAApC/C,EAAe3K,mBACfgB,EAAU4J,EAAU+C,eAGjB,IAAIjE,EAAuB3I,EAAYC,M,iBClPtD5F,EAAOD,QAAUyS,QAAQ,e,gCCAzB,kCAaA,MAAMtJ,EAAM,EAAQ,GAEpB,MAAMuJ,EACF,cACIvQ,KAAKwQ,eAAiB,IAAIxJ,EAAIyJ,eAE9B,MAAMC,EAAoBvJ,eACAnH,KAAKwQ,eAAeG,eAAe,CAACC,SAAU1Q,QAAQC,IAAI0Q,aAAa3G,UAC5FrJ,KAAMiQ,GACIA,GAEVxG,MAAOjC,IACJtE,QAAQC,IAAI,SAAUqE,GACfA,IAKf,WACI,MAAMlG,QAAauO,IAEnB,GADA1Q,KAAK+Q,aAAc,EACf,iBAAkB5O,EAAM,CACxB,IAAI6O,EAAS7O,EAAK8O,aACdC,EAAavP,KAAKC,MAAMoP,GACxBG,EAAcD,EAAWC,YACzBC,EAAkBF,EAAWE,gBAEjCpR,KAAKqR,GAAK,IAAIrK,EAAIsK,GAAG,CACjBC,iBAAkB,KAClBC,YAAa,CACTJ,gBAAiBA,EACjBD,YAAaA,UAIrBnR,KAAK+Q,aAAc,EAEnB/Q,KAAKqR,GAAK,IAAIrK,EAAIsK,IAnB1B,GAwBJ,QAAQG,EAAQnS,GACZ,IAAIkB,EAAS,CACTkR,OAAQD,EACRxQ,IAAK3B,GAET,OAAOU,KAAKqR,GAAGM,UAAUnR,GAAQ0J,UAGrC,gBAAgBuH,EAAQnS,EAAKiQ,EAAQ,KACjC,OAAO,IAAIxK,QAAQ,CAACyB,EAASC,KAEpBzG,KAAK+Q,YAGFxB,EAJa,QAKbxL,QAAQC,IAAI,iUACZuL,EANa,OAEjBxL,QAAQC,IAAI,yCAA2CuL,EAAU,uCAOrE,IAAI/O,EAAS,CACTkR,OAAQD,EACRxQ,IAAK3B,EACLsS,QAASrC,GAEb,OAAOvP,KAAKqR,GAAGQ,aAAa,YAAarR,EAAQ,CAAC6H,EAAKmH,KAC/CnH,EACA5B,EAAO4B,GAGX7B,EAAQ,CACJgJ,MACAD,mB,gCCtFpB,uDAaA,MAAMvI,EAAM,EAAQ,GAGpB,MAAM8K,EAEF,cACI9R,KAAKyD,WAAa,IAAIuD,EAAI+K,kBAG9B,wBAAwBrD,GACpB,IAAIlO,EAAS,CACTwR,qBAAsBtD,GAE1B,OAAO1O,KAAKyD,WACPwO,oBAAoBzR,GAAQ0J,UAC5BrJ,KAAKqR,IACF,IAAI1E,EAAU,CACV2E,OAAQ,MACRC,IAAKF,EAAiBG,iBAAiBC,WAAWC,kBAClDC,MAAM,GAEV,OAAO,IAAGhF,GAAS3M,KAAKuO,IACb,CACH8C,mBACA/C,YAAaC,EAAWqD,QAAQtD,aAAe,UAI1D7E,MAAMjC,IACHtE,QAAQC,IAAIqE,Q,iBC1C5BvK,EAAOD,QAAUyS,QAAQ,oB,kECazB,MAAMoC,EAEF,YAAYC,GACR3S,KAAK8L,UAAY6G,EAAwB,UACzC3S,KAAK+L,UAAY4G,EAAwB,UACzC3S,KAAKkB,QAAUyR,EAAuB,SACtC3S,KAAKkP,mBAAqByD,EAAiC,mBAC3D3S,KAAKoQ,iBAAmBuC,EAA+B,mBAAK,EAC5D3S,KAAKqQ,cAAgBsC,EAA4B,gBAAK,EACtD3S,KAAK4S,iBAAmBD,EAA+B,iBACvD3S,KAAK6S,aAAeF,EAA2B,aAC/C3S,KAAKuO,oBAAsBoE,EAAkC,oBAC7D3S,KAAKwO,mBAAqBmE,EAAiC,mBAC3D3S,KAAK8S,sBAAwBH,EAAoC,sBAGrE,uBACI,MAAO,GAAG3S,KAAK8L,aAAa9L,KAAK+L,aCfzC,MAAM,EAEF,YAAYgH,EAAeC,EAAcC,EAAqBC,GAC1DlT,KAAK+S,cAAgBA,EACrB/S,KAAKgT,aAAeA,EACpBhT,KAAKiT,oBAAsBA,EAC3BjT,KAAKkT,sBAAwBA,EAGjC,gCAAgCxE,EAAS1C,GACrC,IAAImH,EAAezE,EAAQvF,MAAM,KAC7B2C,EAAYqH,EAAa,GACzBpH,EAAYoB,SAASgG,EAAa,IACtC,OAAOnT,KAAK+S,cAAcK,0BAA0BtH,EAAWC,EAAWC,GAG9E,wBAAwBtE,EAAWC,EAAWM,GAC1ClE,QAAQC,IAAI,kCACZ,IAAIqP,EAAe,IAAIX,EAAiB/K,GAIxC,MAD6D,gBAF1C,IAAI+K,EAAiBzK,GAEA2K,kBAAwE,cAAlCS,EAAaT,kBAG9C,OAAlCS,EAAaT,uBAA+DlM,IAAlC2M,EAAaT,iBADvD5S,KAAKsT,SAASD,GAIdtO,QAAQyB,QAAQ,CAAC8E,QAAS,yBAIzC,SAASgC,GACL,OAAOvI,QAAQC,IAAI,CAAChF,KAAKkT,sBAAsBK,cAAevT,KAAKgT,aAAa3M,wBAAwBiH,EAAUpM,WAC7GL,KAAKiD,IACF,IAAIuJ,EAAiBvJ,EAAO,GACxByJ,EAAezJ,EAAO,GAC1B,OAAO9D,KAAKiT,oBAAoBO,QAAQnG,EAAgBC,EAAWC,Q,gBCnDnFzP,EAAOD,QAAUyS,QAAQ,Y,+BCAzB,kCAaA,MAAMtJ,EAAM,EAAQ,GAEpB,MAAMyM,EAEF,YAAYC,GACR1T,KAAK0T,UAAYA,EACjB1T,KAAK2T,OAAS,IAAI3M,EAAIY,SAASgM,eAOnC,OAAOpT,GAGH,OAFAA,EAAkB,UAAIR,KAAK0T,UAC3BlT,EAAqB,aAAI,UAClBR,KAAK2T,OAAOxQ,OAAO3C,GAAQ0J,UAGtC,IAAI1J,GAEA,OADAA,EAAkB,UAAIR,KAAK0T,UACpB1T,KAAK2T,OAAOrR,IAAI9B,GAAQ0J,UAOnC,MAAM1J,GAEF,OADAA,EAAkB,UAAIR,KAAK0T,UACpB1T,KAAK2T,OAAO/S,MAAMJ,GAAQ0J,UAAUrJ,KAAKiD,GAAUA,EAAO+P,OAAS,MAG9E,KAAKrT,EAAQM,EAAQ,IAEjB,OADAN,EAAkB,UAAIR,KAAK0T,UACpB1T,KAAK2T,OAAO1R,KAAKzB,GAAQ0J,UAAUrJ,KAAKiD,IAC3C,IAAIgQ,EAAWhT,EAKf,OAHIgD,EAAO+P,QACPC,EAAWhT,EAAMuJ,OAAOvG,EAAO+P,QAE/B/P,EAAOiQ,kBACPhQ,QAAQC,IAAI,6BACZxD,EAAOkB,kBAAoBoC,EAAOiQ,iBAC3B/T,KAAKiC,KAAKzB,EAAQsT,IAElBA,IAKnB,cAActT,GAEZ,OADAA,EAAkB,UAAIR,KAAK0T,UACpB1T,KAAK2T,OAAO/S,MAAMJ,GAAQ0J,UAAUrJ,KAAKiD,IAC9C,IAAI3B,EAAO,CACTA,KAAM2B,EAAO+P,OAAS,IAKxB,OAHG/P,EAAOiQ,mBACR5R,EAAKd,KAAOQ,OAAOC,KAAKH,KAAKsC,UAAUH,EAAOiQ,kBAAmB,QAAQhS,SAAS,WAE7EI,IAIX,aAAa3B,GAET,OADAA,EAAkB,UAAIR,KAAK0T,UACpB1T,KAAK2T,OAAO1R,KAAKzB,GAAQ0J,UAAUrJ,KAAKiD,IAC3C,IAAI3B,EAAO,CACPA,KAAM2B,EAAO+P,OAAS,IAK1B,OAHG/P,EAAOiQ,mBACN5R,EAAKd,KAAOQ,OAAOC,KAAKH,KAAKsC,UAAUH,EAAOiQ,kBAAmB,QAAQhS,SAAS,WAE/EI,IASf,QAAQ3B,EAAQwT,GAEZ,OADAxT,EAAkB,UAAIR,KAAK0T,UACpB1T,KAAK2T,OAAO/U,IAAI4B,GAAQ0J,UAAUrJ,KAAKiD,GAAUA,EAAO1B,MAAQ,MAG3E,WAAW6R,EAAOC,GACd,OAAO,IAAInP,QAAQ,CAACyB,EAASC,KACzBzG,KAAKmU,YAAYF,EAAOC,GAAerT,KAAKiD,IACpCmQ,EAAMlT,OAAS+C,EAAOsQ,MACtBpU,KAAKqD,WAAW4Q,EAAOnQ,EAAOsQ,OAAOvT,KAAKwT,IACtC7N,EAAQ6N,KAGZ7N,EAAQ1C,EAAO3B,UAM/B,YAAY8R,EAAOC,GACf,OAAO,IAAInP,QAAQ,CAACyB,EAASC,KAEzB,IACI6N,EAAYL,EAAMlT,OAASmT,EADZ,GAC4CA,EAD5C,GAC2ED,EAAMlT,OAChGwT,EAAgBN,EAAMO,MAAMN,EAAeI,GAE3CG,EAAa,CACbC,aAAc,CACV,CAAC1U,KAAK0T,WAAYa,IAG1BvU,KAAK2T,OAAOtQ,WAAWoR,EAAY,CAACpM,EAAKlG,KACjCkG,GACAtE,QAAQC,IAAI,cAAgBrC,KAAKsC,UAAUoE,EAAK,KAAM,IAE1D7B,EAAQ,CAAC,MAAS0N,EAbH,GAaiC,KAAQ/R,W,+BClIxE,kCAaA,MAAMwS,EAEF,YAAYC,GACR5U,KAAKgB,OAAS4T,EAAiB,OAC/B5U,KAAKO,UAAYqU,EAAoB,UACrC5U,KAAK2F,SAAWiP,EAAmB,SACnC5U,KAAK2C,oBAAsBiS,EAA8B,sBAAK,EAC9D5U,KAAK0C,iBAAmBkS,EAA2B,mBAAK,EACxD5U,KAAK0N,gBAAkBkH,EAA0B,iBAAK,CAClD9R,IAAK,CACDC,SAAS,EACTC,YAAa,MAEjBH,OAAO,GAIf,cAAc7B,EAAQT,EAAY,MAC9B,OAAO,IAAIoU,EAAM,CACb3T,SAAQT,UAAWA,EAAWmN,gBAAiB,CAC3C5K,IAAK,CACDC,SAAS,EACTC,YAAa,MAEjBH,OAAO,Q,gBCrCvB/E,EAAOD,QAAUyS,QAAQ","file":"voicemail.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1208);\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\nimport {Agent} from \"../domain/agent.domain\";\n\nclass UsersRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.USERS_TABLE_NAME);\n        this.amazonConnectInstanceId = process.env.AMAZON_CONNECT_INSTANCE_ARN;\n    }\n\n    /**\n     * @param extension\n     * @returns {Promise<object>}\n     */\n    getAgentByExtension(extension) {\n        let params = {\n            IndexName: \"AgentExtensionIndex\",\n            KeyConditionExpression: \"extension = :ext\",\n            ExpressionAttributeValues: {\n                \":ext\": extension\n            },\n        };\n        return this.dynamo.query(params)\n            .then(items => {\n                return items.length > 0 ? new Agent(items[0]) : null;\n            });\n    }\n\n    getAgentByUserId(userId) {\n        let params = {\n            Key: {\n                agentId: userId\n            }\n        };\n        return this.dynamo.getItem(params).then(item => {\n            return item ? new Agent(item) : null;\n        });\n    }\n\n    getAgents(next, size) {\n        let param = {\n            Limit: size || 1000,\n            Select: \"ALL_ATTRIBUTES\"\n        };\n\n        if (next) {\n            param.ExclusiveStartKey = JSON.parse(Buffer.from(next, 'base64').toString('utf-8'));\n        }\n\n        return this.dynamo\n            .scanWithNext(param);\n    }\n\n    getAllAgents() {\n        return this.dynamo\n            .scan({\n                Select: \"ALL_ATTRIBUTES\"\n            });\n    }\n\n    createAgentCreateParam(agent) {\n        let data = {\n            Item: {\n                ...agent,\n                agentId: agent.userId\n            }\n        };\n        if (agent.extension === \"\") {\n            delete data.Item.extension;\n        }\n\n        return data;\n    }\n\n    createAgentDeleteParam(agent) {\n        return {\n            Key: {\n                agentId: agent.userId\n            }\n        };\n    }\n\n    createAgent(agent) {\n        let params = this.createAgentData(agent)\n        return this.dynamo.put(params);\n    }\n\n    updateAgentById(agentId, {extension, deliverSMSPhoneNumber, deliverSMS, deliverEmail, encryptVoicemail, transcribeVoicemail}) {\n        let expressionAttrValues = {\n            \":tv\": transcribeVoicemail || false,\n            \":ev\": encryptVoicemail || false,\n            \":de\": deliverEmail,\n            \":do\": {\n                email: deliverEmail,\n                sms: {\n                    enabled: deliverSMS,\n                    phoneNumber: deliverSMSPhoneNumber === \"\" ? \"null\" : deliverSMSPhoneNumber\n                }\n\n            }\n        };\n\n        if (extension !== null && extension !== \"\") {\n            expressionAttrValues[\":ext\"] = extension;\n        }\n        let updateExpression = \"SET transcribeVoicemail=:tv, encryptVoicemail = :ev, deliveryEmail = :de, deliveryOptions = :do\";\n        (extension === null || extension === \"\") ? updateExpression += ` REMOVE extension` : updateExpression += `, extension = :ext`;\n\n        let params = {\n            Key: {\n                agentId: agentId\n            },\n            ExpressionAttributeValues: expressionAttrValues,\n            UpdateExpression: updateExpression\n        };\n        return this.dynamo.update(params);\n    }\n\n    batchWrite(values) {\n        return this.dynamo.batchWrite(values, 0);\n    }\n}\n\nexport {UsersRepo};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nclass GlobalSettingsService {\n\n    constructor(globalRepo) {\n        this.globalRepo = globalRepo;\n    }\n\n    getSettings() {\n        return this.globalRepo.getGlobalSettings();\n    }\n\n    update(transcribe, encrypt, deliveryEmail, availableSMSCountries) {\n        return this.globalRepo.updateGlobalSettings(transcribe, encrypt, deliveryEmail, availableSMSCountries)\n            .then(result => {\n                console.log(\"Result: \" + JSON.stringify(result));\n                let {transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries} = result.Attributes;\n                return {\n                    transcribeVoicemail,\n                    encryptVoicemail,\n                    deliveryEmail,\n                    availableSMSCountries\n                };\n            });\n    }\n\n    createDefault() {\n        return this.globalRepo.createGlobalSettings(true, true, process.env.DELIVERY_EMAIL);\n    }\n\n}\n\nexport {GlobalSettingsService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass ConnectAgent {\n\n    /**\n     * @param {Agent} agent\n     * @param {ConnectUser} connectUser\n     */\n    constructor(agent, connectUser) {\n        this.userId = agent.userId;\n        this.agent = agent;\n        this.connectUser = connectUser;\n    }\n\n}\n\nexport {ConnectAgent};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nimport {GenericError} from \"./standard.errors\";\n\nclass ExtensionNumberRequiredError extends GenericError {\n    constructor() {\n        super(\n            \"ExtensionNumberRequiredError\",\n            \"Please provide an extension number.\",\n            \"Extension number is required to update an agent\"\n        );\n    }\n}\n\nclass ExtensionInUseError extends GenericError {\n    constructor(extension) {\n        super(\n            \"ExtensionInUseError\",\n            \"Extension already in use. Please provide a different extension number.\",\n            `Cannot have more than one user assigned to the extension number: ${extension}`\n        );\n    }\n}\n\nexport {\n    ExtensionNumberRequiredError,\n    ExtensionInUseError\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {ConnectAgent} from \"../domain/connect-agent.domain\";\nimport {\n    MissingParameterError,\n    InvalidParameterError, MissingParametersError, GenericError\n} from \"../errors/standard.errors\";\nimport {Agent} from \"../domain/agent.domain\";\nimport {\n    ExtensionInUseError\n} from \"../errors/agent.errors\";\n\nimport PhoneNumber from 'awesome-phonenumber';\n\nclass ConnectAgentService {\n\n    constructor(connectService, usersRepo) {\n        this.usersRepo = usersRepo;\n        this.connectService = connectService;\n    }\n\n    /**\n     * @param extension\n     * @returns {Promise<ConnectAgent>}\n     */\n    getConnectAgentByExtension(extension) {\n        return this.usersRepo.getAgentByExtension(extension)\n            .then(agent => this.connectService.getConnectUser(agent.userId)\n                .then(connectUser => new ConnectAgent(agent, connectUser)));\n    }\n\n    /**\n     * @param userId\n     * @returns {Promise<ConnectAgent>}\n     */\n    getConnectAgentByUserId(userId) {\n        return this.connectService.getConnectUser(userId)\n            .then(user => this.usersRepo.getAgentByUserId(userId)\n                .then(agent => new ConnectAgent(agent, user)));\n    }\n\n    /**\n     * @returns {Promise<ConnectAgent[]>}\n     */\n    getConnectAgents(next, size) {\n        return this.usersRepo.getAgents(next, size);\n    }\n\n    syncConnectAgents() {\n        // collect all users in the system\n        return Promise.all([this.connectService.listConnectUsers(), this.usersRepo.getAllAgents()])\n            .then(values => {\n                let [connectUsers, dbUsers] = values;\n                let needUpdate = [];\n\n                connectUsers.forEach(connectUser => {\n                    const found = dbUsers.find(dbUser => dbUser.userId === connectUser.Id);\n                    let agent;\n                    if (found && found.username !== connectUser.Username) {\n                        agent = {\n                            ...found,\n                            username: connectUser.Username\n                        };\n                        needUpdate.push({PutRequest:this.usersRepo.createAgentCreateParam(agent)});\n                    } else if (!found) {\n                        agent = {\n                            userId: connectUser.Id,\n                            username: connectUser.Username\n                        };\n                        needUpdate.push({PutRequest: this.usersRepo.createAgentCreateParam(agent)});\n                    }\n                });\n\n                dbUsers.forEach(dbUser => {\n                    const found = connectUsers.find(connectUser => connectUser.Id === dbUser.userId);\n                    if (!found) {\n                        needUpdate.push({DeleteRequest: this.usersRepo.createAgentDeleteParam(dbUser)});\n                    }\n                });\n\n                if(needUpdate.length > 0) {\n                    return this.usersRepo.batchWrite(needUpdate);\n                }\n            });\n    }\n\n    updateAgentById(agentId, update) {\n        return this._validateAgentUpdate(agentId, update)\n            .then(() => this.createAgentIfNeeded(agentId, update.extension))\n            .then(() => this.usersRepo.updateAgentById(agentId, update))\n            .then(() => this.getConnectAgentByUserId(agentId));\n    }\n\n    createAgentIfNeeded(agentId, extension) {\n        let createAgentPromise = this.usersRepo.getAgentByUserId(agentId).then(agent => {\n            if (agent === null) return this.usersRepo.createAgent(Agent.create(agentId, extension));\n            return agent;\n        });\n        if (extension) {\n            return this.usersRepo.getAgentByExtension(extension)\n                .then(agent => {\n                    if (agent != null && agent.userId !== agentId) {\n                        throw new ExtensionInUseError(extension);\n                    }\n                    return agent;\n                }).then(() => createAgentPromise);\n        } else {\n            return createAgentPromise;\n        }\n    }\n\n    _validateAgentUpdate(agentId, update) {\n        return new Promise((resolve, reject) => {\n            let {extension, deliverSMSPhoneNumber, deliverSMS, deliverEmail, encryptVoicemail, transcribeVoicemail} = update;\n            if (!agentId) {\n                reject(new MissingParameterError(\"agentId\"));\n                return;\n            }\n\n            if (deliverSMS === true && (deliverSMSPhoneNumber === undefined || deliverSMSPhoneNumber === \"\")) {\n                reject(new InvalidParameterError(\n                    \"Please provide a phone number for SMS delivery\",\n                    \"deliverSMSPhoneNumber cannot be null or empty if deliverSMS is true\"));\n                return;\n            }\n\n            if (deliverSMSPhoneNumber) {\n                let phone = new PhoneNumber(deliverSMSPhoneNumber);\n                if (!phone.isValid()) {\n                    reject(new GenericError(\n                        \"InvalidPhoneNumberError\",\n                        \"The phone number you've entered is invalid.  Please enter a valid phone number and try again.\",\n                        `Phone number cannot be validated for ${deliverSMSPhoneNumber}`\n                    ));\n                } else {\n                    update[\"deliverSMSPhoneNumber\"] = phone.getNumber();\n                }\n            }\n\n            if (update.hasOwnProperty(\"extension\") &&\n                (update[\"extension\"].length > 5 || Number.isNaN(update[\"extension\"]))) {\n                reject(new InvalidParameterError(\"Invalid extension number\", \"Extension number must be numeric and less than 5 digits.\"));\n                return;\n            }\n\n            if (!update.hasOwnProperty(\"extension\") ||\n                !update.hasOwnProperty(\"deliverSMS\") ||\n                !update.hasOwnProperty(\"deliverEmail\") ||\n                !update.hasOwnProperty(\"transcribeVoicemail\") ||\n                !update.hasOwnProperty(\"encryptVoicemail\")\n            ) {\n                reject(new MissingParametersError());\n                return;\n            }\n\n            resolve({\n                agentId,\n                update\n            });\n        });\n    }\n\n}\n\nexport {ConnectAgentService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nimport {NotificationService} from \"../service/notification.service\";\n\nconst AWS = require(\"aws-sdk\");\n\nimport {ConnectAgentService} from \"../service/connect-agent.service\";\nimport {ContactVoicemailRepo} from \"../repo/voicemail.repo\";\nimport {ContactVoicemailService} from \"../service/voicemail.service\";\nimport {UsersRepo} from \"../repo/users-repo\";\nimport {ConnectService} from \"../service/connect.service\";\nimport {S3Service} from \"../service/s3.service\";\nimport {TranscriptionService} from \"../service/transcription.service\";\nimport {GlobalSettingsService} from \"../service/global-settings.services\";\nimport {GlobalRepo} from \"../repo/global-repo\";\n\nconst usersRepo = new UsersRepo();\nconst globalRepo = new GlobalRepo();\nconst voicemailService = new ContactVoicemailService(\n    new ContactVoicemailRepo(),\n    new ConnectAgentService(new ConnectService(), usersRepo),\n    new NotificationService(new S3Service(), new TranscriptionService()),\n    new GlobalSettingsService(globalRepo)\n);\n\nexports.stream = async (event, context) => {\n    let {Records} = event;\n    let promises = Records.map(async (record) => {\n        let eventName = record.eventName;\n        let newRecord = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.NewImage);\n        let oldRecord = AWS.DynamoDB.Converter.unmarshall(record.dynamodb.OldImage);\n        return await voicemailService.processVoicemailRecords(eventName, newRecord, oldRecord);\n    });\n\n    try {\n        let result = await Promise.all(promises);\n        return {\n            lambdaResult: \"Success\"\n        };\n    } catch (err) {\n        console.log(err);\n        return {\n            error: err\n        };\n    }\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass ConnectUser {\n\n    constructor(userMap, detail = true) {\n        this.userId = userMap[\"Id\"];\n        this.arn = userMap[\"Arn\"];\n        this.username = userMap[\"Username\"];\n\n        if (!detail) {\n            return;\n        }\n\n        this.firstName = userMap[\"IdentityInfo\"][\"FirstName\"];\n        this.lastName = userMap[\"IdentityInfo\"][\"LastName\"];\n        this.email = userMap[\"IdentityInfo\"][\"Email\"];\n\n        if (userMap.hasOwnProperty(\"PhoneConfig\")) {\n            this.phoneType = userMap[\"PhoneConfig\"][\"PhoneType\"];\n            this.autoAccept = userMap[\"PhoneConfig\"][\"AutoAccept\"];\n            this.deskPhoneNumber = userMap[\"PhoneConfig\"][\"DeskPhoneNumber\"];\n        } else {\n            this.phoneType = null;\n            this.autoAccept = null;\n            this.deskPhoneNumber = null;\n        }\n\n        this.directoryUserId = userMap[\"DirectoryUserId\"];\n        this.routingProfileId = userMap[\"RoutingProfileId\"];\n    }\n\n    getFullName() {\n        return `${this.firstName} ${this.lastName}`;\n    }\n\n}\n\nexport {ConnectUser};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {ConnectUser} from \"../domain/connect-user.domain\";\n\nconst AWS = require('aws-sdk');\nconst delay = t => new Promise(resolve => setTimeout(resolve, t));\n\nclass ConnectService {\n\n    constructor() {\n        this.instanceId = process.env.AMAZON_CONNECT_INSTANCE_ARN.split('/')[1];\n        this.connect = new AWS.Connect();\n\n        // max backoff time set to 45 sec\n        this.maxBackOffTime = 45;\n    }\n\n\n    /**\n     * @returns {Promise<ConnectUser[]>}\n     */\n    getConnectUsers() {\n        return this.listConnectUsers()\n            .then(users => {\n                let promises = users.map(user => this.getConnectUser(user.Id));\n                return Promise.all(promises);\n            });\n    }\n\n    /**\n     *\n     * @param userId\n     * @returns {Promise<ConnectUser>}\n     */\n    getConnectUser(userId) {\n        return new Promise((resolve, reject) => {\n            let params = {\n                InstanceId: this.instanceId,\n                UserId: userId\n            };\n            this.connect.describeUser(params, (err, data) => {\n                if (err) {\n                    console.log(\"Error\", err);\n                    reject(err);\n                    return;\n                }\n                if (!data) {\n                    console.log(\"No user found\");\n                    reject(err);\n                    return;\n                }\n                resolve(new ConnectUser(data.User));\n            });\n        });\n    }\n\n    listConnectUsers() {\n        return this._listConnectUsers([], null, 0);\n    }\n\n\n    _listConnectUsers(list, nextToken, retry) {\n        let params = {\n            InstanceId: this.instanceId,\n            MaxResults: 1000\n        };\n        if (nextToken) {\n            params[\"NextToken\"] = nextToken;\n        }\n\n        return this.connect.listUsers(params)\n            .promise()\n            .then(data => {\n                let {UserSummaryList, NextToken} = data;\n                let users = list.concat(UserSummaryList);\n                if (NextToken) {\n                    return this._listConnectUsers(users, NextToken, 0);\n                } else {\n                    return users;\n                }\n            })\n            .catch(err => {\n                console.warn(\"list connect user failed. Retry: \" + retry, err);\n                if (retry > 5) {\n                    throw err;\n                }\n\n                return delay(Math.min(Math.pow(retry, 2), this.maxBackOffTime))\n                    .then(() => {\n                        return this._listConnectUsers(list, nextToken, retry + 1);\n                    })\n            });\n    }\n\n}\n\nexport {ConnectService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass GlobalSettings {\n\n    constructor(globalSettingsMap) {\n        this.transcribeVoicemail = globalSettingsMap[\"transcribeVoicemail\"] || false;\n        this.encryptVoicemail = globalSettingsMap[\"encryptVoicemail\"] || false;\n        this.deliveryEmail = globalSettingsMap[\"deliveryEmail\"] || null;\n        this.availableSMSCountries = globalSettingsMap[\"availableSMSCountries\"] || (process.env.AVAILABLE_SMS_COUNTRIES || \"\").split(\",\");\n    }\n\n}\n\nexport {GlobalSettings};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\nimport {GlobalSettings} from \"../domain/global-settings.domain\";\n\nclass GlobalRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.GLOBAL_TABLE_NAME);\n        this.amazonConnectInstanceArn = process.env.AMAZON_CONNECT_INSTANCE_ARN;\n    }\n\n    getGlobalSettings() {\n        console.log(\"Getting Global Settings\");\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            }\n        };\n        return this.dynamo.getItem(params).then(item => {\n            return item ? new GlobalSettings(item) : null;\n        });\n    }\n\n    createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let settings = new GlobalSettings({transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries});\n        settings.instanceArn = this.amazonConnectInstanceArn;\n        let params = {\n            Item: settings\n        };\n        console.log(\"dynamo put\");\n        return this.dynamo.put(params).then(() => settings);\n    }\n\n    updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        return this.getGlobalSettings().then(settings => {\n            if (settings) {\n                return this._updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            } else {\n                console.log(\"in create\");\n                return this.createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            }\n        });\n    }\n\n    _updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            },\n            ExpressionAttributeValues: {\n                \":tv\": transcribeVoicemail,\n                \":ev\": encryptVoicemail,\n                \":de\": deliveryEmail,\n                \":ac\": availableSMSCountries\n            },\n            UpdateExpression: \"SET transcribeVoicemail=:tv, encryptVoicemail=:ev, deliveryEmail=:de, availableSMSCountries=:ac\"\n        };\n        return this.dynamo.update(params);\n    }\n}\n\nexport {GlobalRepo};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass GenericError extends Error {\n    constructor(name, message, developerMessage) {\n        super();\n        this.message = message;\n        this.developerMessage = developerMessage;\n        this.name = name;\n    }\n}\n\nclass MissingParameterError extends GenericError {\n    constructor(parameter) {\n        super(\n            \"MissingParameterError\",\n            `Missing parameter`,\n            `Missing parameter: ${parameter}`\n        );\n    }\n}\n\nclass InvalidParameterError extends GenericError {\n    constructor(message, developerMessage) {\n        super(\n            \"InvalidParameterValueError\",\n            message,\n            developerMessage\n        );\n    }\n}\n\nclass MissingParametersError extends GenericError {\n    constructor() {\n        super(\n            \"MissingParametersError\",\n            `One or more parameters are missing`,\n            `You have one ore more parameters miss, please see documentation for more information.`\n        );\n    }\n}\n\nexport {\n    GenericError,\n    MissingParameterError,\n    InvalidParameterError,\n    MissingParametersError\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\n\nclass ContactVoicemailRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.CONTACT_VOICEMAIL_TABLE_NAME);\n    }\n\n    updateTranscriptionStatus(contactId, timestamp, status) {\n        // Query for all objects with the contact id\n        // Update each object with the new status\n        \n        let queryParam = {\n            KeyConditionExpression: 'contactId = :contactId',\n            ExpressionAttributeValues: {\n                ':contactId': contactId\n            }\n        };\n\n        return Promise.all([this.dynamo.query(queryParam)])\n            .then(values => {\n\n                let promises = [];\n                values[0].map(queryResult => {\n                    let params = {\n                        Key: {\n                            \"contactId\": contactId,\n                            \"readerId\": queryResult.readerId\n                        },\n                        ExpressionAttributeValues: {\n                            \":status\": status\n                        },\n                        UpdateExpression: \"SET transcribeStatus = :status\"\n                    };\n                    promises.push(this.dynamo.update(params));\n                });\n\n                return Promise.all(promises);\n            });\n    }\n\n}\n\nexport {ContactVoicemailRepo};\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\nimport nodemailer from 'nodemailer';\n\n\nclass DeliveryOptionSettings {\n    constructor(transcribe, encrypt) {\n        this.transcribe = transcribe;\n        this.encrypt = encrypt;\n    }\n}\n\nclass DeliveryContent {\n    constructor(transcription, preSignedUrl, audioFile) {\n        this.transcription = transcription;\n        this.preSignedUrl = preSignedUrl;\n        this.audioFile = audioFile;\n    }\n}\n\nclass NotificationService {\n\n    constructor(s3Service, transcriptionService) {\n        this.s3Service = s3Service;\n        this.transcriptionService = transcriptionService;\n        this.ses = new AWS.SES();\n        this.sns = new AWS.SNS();\n        this.transporter = nodemailer.createTransport({SES: this.ses});\n        this.recordingExpiration = parseInt(process.env.SIGNED_RECORDING_URL_EXP)\n    }\n\n    /**\n     *\n     * @param {GlobalSettings} globalSettings\n     * @param {ContactVoicemail} voicemail\n     * @param {ConnectAgent} connectAgent\n     * @return {Promise<Object>}\n     */\n    deliver(globalSettings, voicemail, connectAgent) {\n        let options = this.getTranscribeAndEncryptionSettings(globalSettings, voicemail);\n        let deliveryOptions = connectAgent.agent.deliveryOptions;\n        let shouldSendEmail = deliveryOptions.email;\n        let shouldSendSMS = deliveryOptions.sms.enabled;\n        let contactEmail = connectAgent.connectUser.email || connectAgent.connectUser.username; // For SSO instances\n        let agentSMSPhoneNumber = deliveryOptions.sms.phoneNumber;\n        let deliveryEmail = globalSettings.deliveryEmail;\n\n        if (!deliveryEmail) {\n            throw \"You must provide a delivery email\";\n        }\n\n        if (!shouldSendEmail && !shouldSendSMS) {\n            console.log(\"NOT sending email or sms\");\n            return Promise.resolve({message: \"Not sending Email or SNS\"});\n        } else {\n            if (shouldSendEmail && shouldSendSMS) {\n                console.log(`Should Send BOTH email and SMS`);\n                return this.getDeliveryContents(options, voicemail).then(contents => {\n                    return this.sendTextMessage(voicemail, agentSMSPhoneNumber, contents)\n                        .then(() => this.sendMail(voicemail, deliveryEmail, contactEmail, contents));\n                });\n            } else if (shouldSendSMS && agentSMSPhoneNumber) {\n                console.log(\"Send ONLY SMS\");\n                return this.getDeliveryContents(options, voicemail).then(contents => {\n                    return this.sendTextMessage(voicemail, agentSMSPhoneNumber, contents);\n                });\n            } else if (deliveryOptions.email) {\n                console.log(\"Send ONLY Email\");\n                return this.getDeliveryContents(options, voicemail).then(contents => {\n                    return this.sendMail(voicemail, deliveryEmail, contactEmail, contents);\n                });\n            } else {\n                return Promise.resolve({message: \"Undeliverable\"});\n            }\n        }\n    }\n\n    /**\n     * @param {ContactVoicemail} voicemail\n     * @param {DeliveryOptionSettings} options\n     * @returns {Promise<DeliveryContent>}\n     */\n    getDeliveryContents(options, voicemail) {\n        console.log(\"Getting Delivery Contents\");\n\n        let transcriptionPromise = Promise.resolve(null);\n        let preSignedUrlPromise = Promise.resolve(null);\n        let audioFilePromise = Promise.resolve(null);\n\n        if (options.encrypt) {\n            console.log(\"Encrypt...\");\n            preSignedUrlPromise = this.s3Service.getPreSignedUrl(voicemail.recordingBucketName, voicemail.recordingObjectKey, this.recordingExpiration);\n        } else {\n            console.log(\"Unencrypted...\");\n            audioFilePromise = this.s3Service.getFile(voicemail.recordingBucketName, voicemail.recordingObjectKey);\n        }\n\n        if (options.transcribe) {\n            console.log(\"Transcribe...\");\n            let jobName = voicemail.getTranscriptJobName();\n            transcriptionPromise = this.transcriptionService.getTranscriptForJobName(jobName);\n        }\n\n        return Promise\n            .all([transcriptionPromise, preSignedUrlPromise, audioFilePromise])\n            .then(result => {\n                let transcription = result[0];\n                let preSignedUrl = result[1];\n                let audioFile = result[2];\n                return new DeliveryContent(transcription, preSignedUrl, audioFile);\n            });\n    }\n\n    /**\n     *\n     * @param {ContactVoicemail} voicemail\n     * @param {string} fromEmailAddress\n     * @param {string} toEmailAddress\n     * @param {DeliveryContent} deliveryContent\n     */\n    sendMail(voicemail, fromEmailAddress, toEmailAddress, deliveryContent) {\n        return new Promise((resolve, reject) => {\n            let voicemailDate = new Date(voicemail.timestamp * 1000);\n\n            // Date\n            let html = `<p>${voicemailDate}</p>`;\n            html += `<p>New voicemail from ${voicemail.contactPhoneNumber}.</p>`;\n\n            // Transcript\n            if (deliveryContent.transcription) {\n                html += `<b>Voicemail Transcript:</b><p>${deliveryContent.transcription.transcripts[0].transcript}</p>`;\n            }\n\n            // Voicemail\n            html += `<b>Voicemail:</b>`;\n            if (deliveryContent.preSignedUrl) {\n                // Expiration Date\n                let expirationDate = new Date(Math.floor((Date.now() / 1000) + deliveryContent.preSignedUrl.expires) * 1000);\n                html += `<p>Voicemail Expiration Date: ${expirationDate}</p>`;\n\n                // Audio Link\n                let audioLink = `<p><a href=\"${deliveryContent.preSignedUrl.url}\">Click Here</a> to listen to the voicemail</p>`;\n                html += audioLink;\n            }\n\n            let mailOptions = {\n                from: fromEmailAddress,\n                subject: `New voicemail from ${voicemail.contactPhoneNumber}`,\n                html,\n                to: toEmailAddress\n            };\n\n            // Audio Attachment\n            if (deliveryContent.audioFile) {\n                mailOptions[\"attachments\"] = [{\n                    filename: \"voicemail.wav\",\n                    content: deliveryContent.audioFile.Body\n                }];\n            }\n\n            this.transporter.sendMail(mailOptions, (err, info) => {\n                if (err) {\n                    console.log(err);\n                    reject(err);\n                    return;\n                }\n                resolve(info);\n            });\n        });\n    }\n\n    /**\n     *\n     * @param {ContactVoicemail} voicemail\n     * @param {string} deliveryPhoneNumber\n     * @param {DeliveryContent} deliveryContent\n     */\n    sendTextMessage(voicemail, deliveryPhoneNumber, deliveryContent) {\n        return new Promise((resolve, reject) => {\n\n            let message = `Amazon Connect voicemail from ${voicemail.contactPhoneNumber}\\n`;\n\n            // Transcript\n            if (deliveryContent.transcription) {\n                message += `\\nTranscript: \"${deliveryContent.transcription.transcripts[0].transcript}\"\\n`;\n            }\n\n            if (deliveryContent.preSignedUrl) {\n                // Expiration Date\n                let expirationDate = new Date(Math.floor((Date.now() / 1000) + deliveryContent.preSignedUrl.expires) * 1000);\n                message += `\\nVoicemail Expiration Date: ${expirationDate}\\n`;\n\n                // Audio Link\n                let audioLink = `${deliveryContent.preSignedUrl.url}`;\n                message += audioLink;\n            }\n\n            let params = {\n                Message: message,\n                PhoneNumber: deliveryPhoneNumber\n            };\n\n            this.sns.publish(params, (err, data) => {\n                if (err) {\n                    console.log(`Error: ${err}`);\n                }\n                resolve(data);\n            });\n        });\n\n    }\n\n    /**\n     *\n     * @param {GlobalSettings} globalSettings\n     * @param {ContactVoicemail} voicemail\n     * @returns DeliveryOptionSettings\n     */\n    getTranscribeAndEncryptionSettings(globalSettings, voicemail) {\n        let transcribe = false;\n        let encrypt = true;\n\n        if (globalSettings.transcribeVoicemail === true) {\n            transcribe = voicemail.shouldTranscribe;\n        }\n\n        if (globalSettings.encryptVoicemail === false) {\n            encrypt = voicemail.shouldEncrypt;\n        }\n\n        return new DeliveryOptionSettings(transcribe, encrypt);\n    }\n\n}\n\nexport {NotificationService, DeliveryOptionSettings};","module.exports = require(\"nodemailer\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\n\nclass S3Service {\n    constructor() {\n        this.secretsManager = new AWS.SecretsManager();\n\n        const getAWSCredentials = async() => {\n            const results = await this.secretsManager.getSecretValue({SecretId: process.env.SECRET_ARN}).promise()\n            .then((res) => {\n                return res;\n            })\n            .catch((err) => {\n                console.log('error ', err);\n                return err;\n            });\n            return results;\n        };\n        \n        (async () => {\n            const data = await getAWSCredentials()\n            this.isTempToken = false;\n            if ('SecretString' in data) {\n                var secret = data.SecretString;\n                var jsonParsed = JSON.parse(secret);\n                var accessKeyId = jsonParsed.accessKeyId;\n                var secretAccessKey = jsonParsed.secretAccessKey;\n                // Creating a S3 client to include the access key ID and secret access key of an IAM user and to use AWS Signature Version 4\n                this.s3 = new AWS.S3({\n                    signatureVersion: 'v4',\n                    credentials: {\n                        secretAccessKey: secretAccessKey,\n                        accessKeyId: accessKeyId\n                    }\n                });\n            } else {\n                this.isTempToken = true;\n                // Creating a S3 client using temporary credentials of Lambda IAM Role\n                this.s3 = new AWS.S3();\n            }\n        })()\n    }\n\n    getFile(bucket, key) {\n        let params = {\n            Bucket: bucket,\n            Key: key\n        };\n        return this.s3.getObject(params).promise();\n    }\n\n    getPreSignedUrl(bucket, key, expires=900) {\n        return new Promise((resolve, reject) => {\n            const TWELVE_HOURS = 43200; // 12 hours in seconds\n            if (!this.isTempToken) {\n                console.log('Creating a pre-signed URL valid up to ' + expires + ' seconds using IAM User Access Key.');\n            } else {\n                if (expires > TWELVE_HOURS) {\n                    console.log('Could not create a presigned URL valid for greater than 12 hours because there was an error while retrieving the IAM User Access Key credentials from the AWS Secrets Manager (please refer to CloudWatch Logs for details). So creating a presigned URL valid up to 12 hours using temporary credentials of Lambda IAM Role.');\n                    expires = TWELVE_HOURS;\n                } \n            }\n            let params = {\n                Bucket: bucket,\n                Key: key,\n                Expires: expires\n            };\n            return this.s3.getSignedUrl('getObject', params, (err, url) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve({\n                    url,\n                    expires\n                });\n            });\n        });\n    }\n}\n\nexport {S3Service};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\nimport rp from 'request-promise';\n\nclass TranscriptionService {\n\n    constructor() {\n        this.transcribe = new AWS.TranscribeService();\n    }\n\n    getTranscriptForJobName(jobName) {\n        let params = {\n            TranscriptionJobName: jobName\n        };\n        return this.transcribe\n            .getTranscriptionJob(params).promise()\n            .then(transcriptionJob => {\n                let options = {\n                    method: 'GET',\n                    uri: transcriptionJob.TranscriptionJob.Transcript.TranscriptFileUri,\n                    json: true\n                };\n                return rp(options).then(transcript => {\n                    return {\n                        transcriptionJob,\n                        transcripts: transcript.results.transcripts || null\n                    };\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n}\n\nexport {TranscriptionService};","module.exports = require(\"request-promise\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass ContactVoicemail {\n\n    constructor(voicemailMap) {\n        this.contactId = voicemailMap[\"contactId\"];\n        this.timestamp = voicemailMap[\"timestamp\"];\n        this.agentId = voicemailMap[\"readerId\"];\n        this.contactPhoneNumber = voicemailMap[\"contactPhoneNumber\"];\n        this.shouldTranscribe = voicemailMap[\"shouldTranscribe\"] || false;\n        this.shouldEncrypt = voicemailMap[\"shouldEncrypt\"] || false;\n        this.transcribeStatus = voicemailMap[\"transcribeStatus\"];\n        this.recordingUrl = voicemailMap[\"recordingUrl\"];\n        this.recordingBucketName = voicemailMap[\"recordingBucketName\"];\n        this.recordingObjectKey = voicemailMap[\"recordingObjectKey\"];\n        this.recordingBucketRegion = voicemailMap[\"recordingBucketRegion\"];\n    }\n\n    getTranscriptJobName() {\n        return `${this.contactId}_${this.timestamp}`;\n    }\n\n}\n\nexport {ContactVoicemail};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {ContactVoicemail} from \"../domain/voicemail.domain\";\n\nclass ContactVoicemailService {\n\n    constructor(voicemailRepo, agentService, notificationService, globalSettingsService) {\n        this.voicemailRepo = voicemailRepo;\n        this.agentService = agentService;\n        this.notificationService = notificationService;\n        this.globalSettingsService = globalSettingsService;\n    }\n\n    updateVoicemailTranscriptStatus(jobName, status) {\n        let jobNameSplit = jobName.split(\"_\");\n        let contactId = jobNameSplit[0];\n        let timestamp = parseInt(jobNameSplit[1]);\n        return this.voicemailRepo.updateTranscriptionStatus(contactId, timestamp, status);\n    }\n\n    processVoicemailRecords(eventName, newRecord, oldRecord) {\n        console.log(\"Processing Voicemail Recording\");\n        let newVoicemail = new ContactVoicemail(newRecord);\n        let oldVoicemail = new ContactVoicemail(oldRecord);\n\n        let transcribeCompleted = (oldVoicemail.transcribeStatus === \"IN_PROGRESS\" && newVoicemail.transcribeStatus === \"COMPLETED\");\n        if (transcribeCompleted) {\n            return this._deliver(newVoicemail);\n        } else if (newVoicemail.transcribeStatus === null || newVoicemail.transcribeStatus === undefined) {\n            return this._deliver(newVoicemail);\n        } else {\n            return Promise.resolve({message: \"Unhandled Resolution\"});\n        }\n    }\n\n    _deliver(voicemail) {\n        return Promise.all([this.globalSettingsService.getSettings(), this.agentService.getConnectAgentByUserId(voicemail.agentId)])\n            .then(result => {\n                let globalSettings = result[0];\n                let connectAgent = result[1];\n                return this.notificationService.deliver(globalSettings, voicemail, connectAgent);\n            });\n    }\n\n}\n\nexport {ContactVoicemailService};","module.exports = require(\"aws-sdk\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require(\"aws-sdk\");\n\nclass DynamoDBService {\n\n    constructor(tableName) {\n        this.tableName = tableName;\n        this.client = new AWS.DynamoDB.DocumentClient();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<Object>}\n     */\n    update(params) {\n        params[\"TableName\"] = this.tableName;\n        params[\"ReturnValues\"] = \"ALL_NEW\";\n        return this.client.update(params).promise();\n    }\n\n    put(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.put(params).promise();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<DocumentClient.AttributeMap[] | null>}\n     */\n    query(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.query(params).promise().then(result => result.Items || null);\n    }\n\n    scan(params, items = []) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            let allItems = items;\n\n            if (result.Items) {\n                allItems = items.concat(result.Items);\n            }\n            if (result.LastEvaluatedKey){\n                console.log(\"Rescanning with next page\");\n                params.ExclusiveStartKey = result.LastEvaluatedKey;\n                return this.scan(params, allItems);\n            } else {\n                return allItems;\n            }\n        });\n    }\n\n    queryWithNext(params) {\n      params[\"TableName\"] = this.tableName;\n      return this.client.query(params).promise().then(result => {\n        let data = {\n          data: result.Items || []\n        };\n        if(result.LastEvaluatedKey) {\n          data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n        }\n        return data;\n      });\n    }\n\n    scanWithNext(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            let data = {\n                data: result.Items || []\n            };\n            if(result.LastEvaluatedKey) {\n                data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n            }\n            return data;\n        });\n    }\n\n    /**\n     * @param params\n     * @param callback\n     * @returns {Promise<DocumentClient.AttributeMap | null>}\n     */\n    getItem(params, callback) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.get(params).promise().then(result => result.Item || null);\n    }\n\n    batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            this._batchWrite(batch, startingIndex).then(result => {\n                if (batch.length > result.index) {\n                    this.batchWrite(batch, result.index).then(nextData => {\n                        resolve(nextData);\n                    });\n                } else {\n                    resolve(result.data);\n                }\n            });\n        });\n    }\n\n    _batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            // DDB has a limit of 25 items at once\n            let maxDdbUpdate = 24;\n            let endIndex = (batch.length > startingIndex + maxDdbUpdate) ? startingIndex + maxDdbUpdate : batch.length;\n            let batchToUpdate = batch.slice(startingIndex, endIndex);\n\n            let batchParam = {\n                RequestItems: {\n                    [this.tableName]: batchToUpdate\n                }\n            };\n            this.client.batchWrite(batchParam, (err, data) => {\n                if (err) {\n                    console.log(\"Any error? \" + JSON.stringify(err, null, 2));\n                }\n                resolve({'index': startingIndex + maxDdbUpdate, 'data': data});\n            });\n        });\n    }\n}\n\nexport {DynamoDBService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass Agent {\n\n    constructor(agentMap) {\n        this.userId = agentMap[\"userId\"];\n        this.extension = agentMap[\"extension\"];\n        this.username = agentMap[\"username\"];\n        this.transcribeVoicemail = agentMap[\"transcribeVoicemail\"] || false;\n        this.encryptVoicemail = agentMap[\"encryptVoicemail\"] || false;\n        this.deliveryOptions = agentMap[\"deliveryOptions\"] || {\n            sms: {\n                enabled: false,\n                phoneNumber: null\n            },\n            email: false\n        };\n    }\n\n    static create(userId, extension = null) {\n        return new Agent({\n            userId, extension: extension, deliveryOptions: {\n                sms: {\n                    enabled: false,\n                    phoneNumber: null\n                },\n                email: false\n            }\n        });\n    }\n\n}\n\nexport {Agent};","module.exports = require(\"awesome-phonenumber\");"],"sourceRoot":""}