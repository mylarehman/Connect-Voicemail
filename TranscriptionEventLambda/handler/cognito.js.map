{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/service/global-settings.services.js","webpack:///./src/lib/custom-resource-util.js","webpack:///./src/errors/cognito.errors.js","webpack:///./src/service/cognito.service.js","webpack:///./src/handler/cognito.js","webpack:///./src/domain/global-settings.domain.js","webpack:///./src/repo/global-repo.js","webpack:///external \"url\"","webpack:///external \"amazon-cognito-identity-js\"","webpack:///external \"aws-sdk\"","webpack:///./src/lib/dynamo.js","webpack:///external \"node-fetch\"","webpack:///external \"https\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GlobalSettingsService","globalRepo","this","getGlobalSettings","transcribe","encrypt","deliveryEmail","availableSMSCountries","updateGlobalSettings","then","result","console","log","JSON","stringify","transcribeVoicemail","encryptVoicemail","Attributes","createGlobalSettings","process","env","DELIVERY_EMAIL","CloudFormationResponse","sendCloudFormationResponse","event","context","responseStatus","physicalResourceId","responseData","noEcho","Promise","resolve","reject","reason","logStreamName","responseBody","Status","Reason","PhysicalResourceId","StackId","RequestId","LogicalResourceId","NoEcho","Data","https","parsedUrl","parse","ResponseURL","options","hostname","port","path","method","headers","length","request","response","statusCode","statusMessage","on","error","write","end","Error","AWS","global","fetch","default","globalSettings","cognitoService","identityServiceProvider","CognitoIdentityServiceProvider","userPoolId","COGNITO_USER_POOL_ID","email","firstName","lastName","roles","removeExisting","temporaryPassword","params","UserPoolId","Username","DesiredDeliveryMediums","ForceAliasCreation","UserAttributes","Name","Value","getCognitoUser","actions","adminDeleteUser","adminCreateUser","promise","all","split","map","role","adminAddUserToGroup","GroupName","idToken","accessToken","refreshToken","AccessToken","IdToken","RefreshToken","cachedSession","isValid","Pool","poolData","refreshSession","err","session","getIdToken","getJwtToken","getAccessToken","getRefreshToken","getToken","username","adminGetUser","data","usersConfig","ResourceProperties","RequestType","AdminEmail","AdminFirstName","AdminLastName","ManagerEmail","ManagerFirstName","ManagerLastName","undefined","catch","createDefault","GlobalSettings","globalSettingsMap","AVAILABLE_SMS_COUNTRIES","dynamo","GLOBAL_TABLE_NAME","amazonConnectInstanceArn","AMAZON_CONNECT_INSTANCE_ARN","Key","instanceArn","getItem","item","settings","Item","put","_updateGlobalSettings","ExpressionAttributeValues","UpdateExpression","update","require","DynamoDBService","tableName","client","DynamoDB","DocumentClient","query","Items","items","scan","allItems","concat","LastEvaluatedKey","ExclusiveStartKey","next","Buffer","from","toString","callback","batch","startingIndex","_batchWrite","index","batchWrite","nextData","endIndex","batchToUpdate","slice","batchParam","RequestItems"],"mappings":"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","file":"cognito.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1210);\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nclass GlobalSettingsService {\n\n    constructor(globalRepo) {\n        this.globalRepo = globalRepo;\n    }\n\n    getSettings() {\n        return this.globalRepo.getGlobalSettings();\n    }\n\n    update(transcribe, encrypt, deliveryEmail, availableSMSCountries) {\n        return this.globalRepo.updateGlobalSettings(transcribe, encrypt, deliveryEmail, availableSMSCountries)\n            .then(result => {\n                console.log(\"Result: \" + JSON.stringify(result));\n                let {transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries} = result.Attributes;\n                return {\n                    transcribeVoicemail,\n                    encryptVoicemail,\n                    deliveryEmail,\n                    availableSMSCountries\n                };\n            });\n    }\n\n    createDefault() {\n        return this.globalRepo.createGlobalSettings(true, true, process.env.DELIVERY_EMAIL);\n    }\n\n}\n\nexport {GlobalSettingsService};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nexport const CloudFormationResponse = {\n    SUCCESS: \"SUCCESS\",\n    FAILED: \"FAILED\"\n};\n\n/**\n *\n * @param event\n * @param context\n * @param responseStatus\n * @param physicalResourceId\n * @param responseData\n * @param noEcho\n * @returns {Promise<object>}\n */\nexport function sendCloudFormationResponse(event, context, responseStatus, physicalResourceId, responseData = {}, noEcho = false) {\n    return new Promise((resolve, reject) => {\n        let reason = \"\";\n        if (responseStatus === 'FAILED') {\n            reason = `See details in CloudWatch Stream ${context.logStreamName}`;\n        }\n\n        let responseBody = JSON.stringify({\n            Status: responseStatus,\n            Reason: reason,\n            PhysicalResourceId: physicalResourceId || context.logStreamName,\n            StackId: event.StackId,\n            RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n            NoEcho: noEcho,\n            Data: responseData\n        });\n\n        let https = require('https');\n        let url = require('url');\n        let parsedUrl = url.parse(event.ResponseURL);\n        let options = {\n            hostname: parsedUrl.hostname,\n            port: 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n            headers: {\n                \"content-type\": \"\",\n                \"content-length\": responseBody.length\n            }\n        };\n\n        let request = https.request(options, (response) => {\n            resolve({\n                statusCode: response.statusCode,\n                statusMessage: response.statusMessage\n            });\n        });\n\n        request.on(\"error\", (error) => {\n            console.log(JSON.stringify(error, null, 2));\n            reject(\"send(..) failed executing https.request(..): \" + error);\n        });\n\n        request.write(responseBody);\n        request.end();\n    });\n\n\n}\n\n","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass NewPasswordRequiredError extends Error {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = \"NewPasswordRequired\";\n    }\n}\n\nexport {NewPasswordRequiredError};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require('aws-sdk');\n\nglobal.fetch = require('node-fetch').default;\n\nimport {\n    CognitoUserPool,\n    CognitoUserAttribute,\n    CognitoUser,\n    CognitoAccessToken,\n    CognitoIdToken,\n    CognitoRefreshToken,\n    CognitoUserSession,\n    AuthenticationDetails\n} from 'amazon-cognito-identity-js';\n\nimport {NewPasswordRequiredError} from \"../errors/cognito.errors\";\n\nexport class CognitoService {\n\n    constructor() {\n        this.identityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n        this.userPoolId = process.env.COGNITO_USER_POOL_ID;\n    }\n\n    /**\n     *\n     * @param email\n     * @param firstName\n     * @param lastName\n     * @param {string|null} temporaryPassword If null, then a temporary password will be provided by Cognito\n     * @param roles\n     * @param {boolean} removeExisting To remove the existing user before creating a new user\n     * @returns {Promise<Object>}\n     */\n    adminCreateUser(email, firstName, lastName, roles, removeExisting=false, temporaryPassword=null) {\n        let params = {\n            UserPoolId: this.userPoolId,\n            Username: email,\n            DesiredDeliveryMediums: [\"EMAIL\"],\n            ForceAliasCreation: false,\n            UserAttributes: [\n                { Name: 'given_name', Value: firstName },\n                { Name: 'family_name', Value: lastName},\n                { Name: 'email', Value: email },\n                { Name: 'email_verified', Value: \"true\" },\n            ]\n        };\n\n        if (temporaryPassword) {\n            params[\"TemporaryPassword\"] = temporaryPassword;\n        }\n\n        return this.getCognitoUser(email)\n            .then(result => {\n                let actions;\n                if (result && removeExisting) {\n                    actions = this.adminDeleteUser(email)\n                      .then(() => this.identityServiceProvider.adminCreateUser(params).promise());\n                } else {\n                    actions = this.identityServiceProvider.adminCreateUser(params).promise()\n                }\n\n                return actions\n                  .then(() => Promise.all(\n                    roles.split(\",\").map(role => this.identityServiceProvider.adminAddUserToGroup({\n                        GroupName: role,\n                        UserPoolId: this.userPoolId,\n                        Username: email\n                    }).promise())));\n            });\n    }\n\n    adminDeleteUser(email) {\n        let params = {\n            UserPoolId: this.userPoolId,\n            Username: email\n        };\n        return this.identityServiceProvider.adminDeleteUser(params).promise();\n    }\n\n    refreshToken(email, idToken, accessToken, refreshToken) {\n        return new Promise((resolve, reject) => {\n            const AccessToken = new CognitoAccessToken({AccessToken: accessToken});\n            const IdToken = new CognitoIdToken({IdToken: idToken});\n            const RefreshToken = new CognitoRefreshToken({RefreshToken: refreshToken});\n            const cachedSession = new CognitoUserSession({IdToken, RefreshToken, AccessToken});\n            console.log(\"Refreshing token\", cachedSession.isValid());\n            if (!cachedSession.isValid()) {\n                reject(new Error(\"InvalidUserSession\"));\n            } else {\n                let cognitoUser = new CognitoUser({Username: email, Pool: new CognitoUserPool(this.poolData)});\n                cognitoUser.refreshSession(RefreshToken, (err, session) => {\n                    if (err) {\n                        reject(err);\n                        return;\n                    }\n                    resolve({\n                        idToken: session.getIdToken().getJwtToken(),\n                        accessToken: session.getAccessToken().getJwtToken(),\n                        refreshToken: session.getRefreshToken().getToken()\n                    });\n                });\n            }\n        });\n    }\n\n    getCognitoUser(username) {\n        return new Promise((resolve, reject) => {\n            let params = {\n                UserPoolId: this.userPoolId,\n                Username: username\n            };\n            this.identityServiceProvider.adminGetUser(params, (err, data) => {\n                if (err) {\n                    console.log(JSON.stringify(err, null, 2));\n                    resolve(null);\n                }\n                resolve(data);\n            });\n        });\n    }\n\n}","import {CloudFormationResponse, sendCloudFormationResponse} from \"../lib/custom-resource-util\";\n/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nimport {CognitoService} from \"../service/cognito.service\";\nimport {GlobalRepo} from \"../repo/global-repo\";\nimport {GlobalSettingsService} from \"../service/global-settings.services\";\n\nconst globalSettings = new GlobalSettingsService(new GlobalRepo());\nconst cognitoService = new CognitoService();\n\nexports.usersConfig = (event, context) => {\n    let {ResourceProperties, RequestType} = event;\n    let {AdminEmail, AdminFirstName, AdminLastName,\n        ManagerEmail, ManagerFirstName, ManagerLastName\n    } = ResourceProperties;\n\n    if ((RequestType === 'Create' || RequestType === 'Update') && AdminEmail !== undefined && ManagerEmail !== undefined) {\n        return cognitoService\n            .adminCreateUser(AdminEmail, AdminFirstName, AdminLastName, 'Admin,Manager', true)\n            .then(() => cognitoService.adminCreateUser(ManagerEmail, ManagerFirstName, ManagerLastName, 'Manager', true))\n            .then(() => sendCloudFormationResponse(event, context, CloudFormationResponse.SUCCESS, context.logStreamName))\n            .then(result => console.log(\"Successful send.\"))\n            .then(() => globalSettings.createDefault())\n            .then(result => console.log(\"Successful put!\"))\n            .catch(err => {\n                console.log(JSON.stringify(err, null, 2))\n                return sendCloudFormationResponse(event, context, CloudFormationResponse.FAILED, context.logStreamName);\n            });\n    } else {\n        return sendCloudFormationResponse(event, context, CloudFormationResponse.SUCCESS, context.logStreamName)\n            .then(result => console.log(\"Success sending cloudformation result\"))\n            .catch(err => console.log(\"Error sending cloudformation result\"));\n    }\n};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *                                                                                                                   *\n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                                                                   \n *      http://www.apache.org/licenses/                                                                                   *                                                                                                                  \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                                                                \n******************************************************************************/\n\nclass GlobalSettings {\n\n    constructor(globalSettingsMap) {\n        this.transcribeVoicemail = globalSettingsMap[\"transcribeVoicemail\"] || false;\n        this.encryptVoicemail = globalSettingsMap[\"encryptVoicemail\"] || false;\n        this.deliveryEmail = globalSettingsMap[\"deliveryEmail\"] || null;\n        this.availableSMSCountries = globalSettingsMap[\"availableSMSCountries\"] || (process.env.AVAILABLE_SMS_COUNTRIES || \"\").split(\",\");\n    }\n\n}\n\nexport {GlobalSettings};","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nimport {DynamoDBService} from \"../lib/dynamo\";\nimport {GlobalSettings} from \"../domain/global-settings.domain\";\n\nclass GlobalRepo {\n\n    constructor() {\n        this.dynamo = new DynamoDBService(process.env.GLOBAL_TABLE_NAME);\n        this.amazonConnectInstanceArn = process.env.AMAZON_CONNECT_INSTANCE_ARN;\n    }\n\n    getGlobalSettings() {\n        console.log(\"Getting Global Settings\");\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            }\n        };\n        return this.dynamo.getItem(params).then(item => {\n            return item ? new GlobalSettings(item) : null;\n        });\n    }\n\n    createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let settings = new GlobalSettings({transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries});\n        settings.instanceArn = this.amazonConnectInstanceArn;\n        let params = {\n            Item: settings\n        };\n        console.log(\"dynamo put\");\n        return this.dynamo.put(params).then(() => settings);\n    }\n\n    updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        return this.getGlobalSettings().then(settings => {\n            if (settings) {\n                return this._updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            } else {\n                console.log(\"in create\");\n                return this.createGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries);\n            }\n        });\n    }\n\n    _updateGlobalSettings(transcribeVoicemail, encryptVoicemail, deliveryEmail, availableSMSCountries) {\n        let params = {\n            Key: {\n                instanceArn: this.amazonConnectInstanceArn\n            },\n            ExpressionAttributeValues: {\n                \":tv\": transcribeVoicemail,\n                \":ev\": encryptVoicemail,\n                \":de\": deliveryEmail,\n                \":ac\": availableSMSCountries\n            },\n            UpdateExpression: \"SET transcribeVoicemail=:tv, encryptVoicemail=:ev, deliveryEmail=:de, availableSMSCountries=:ac\"\n        };\n        return this.dynamo.update(params);\n    }\n}\n\nexport {GlobalRepo};","module.exports = require(\"url\");","module.exports = require(\"amazon-cognito-identity-js\");","module.exports = require(\"aws-sdk\");","/******************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n *  Licensed under the Apache License Version 2.0 (the 'License'). You may not\n *  use this file except in compliance with the License. A copy of the License\n *  is located at                                                            \n *                                                                              \n *      http://www.apache.org/licenses/                                        \n *  or in the 'license' file accompanying this file. This file is distributed on\n *  an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or\n *  implied. See the License for the specific language governing permissions and\n *  limitations under the License.                                              \n******************************************************************************/\n\nconst AWS = require(\"aws-sdk\");\n\nclass DynamoDBService {\n\n    constructor(tableName) {\n        this.tableName = tableName;\n        this.client = new AWS.DynamoDB.DocumentClient();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<Object>}\n     */\n    update(params) {\n        params[\"TableName\"] = this.tableName;\n        params[\"ReturnValues\"] = \"ALL_NEW\";\n        return this.client.update(params).promise();\n    }\n\n    put(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.put(params).promise();\n    }\n\n    /**\n     * @param params\n     * @returns {Promise<DocumentClient.AttributeMap[] | null>}\n     */\n    query(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.query(params).promise().then(result => result.Items || null);\n    }\n\n    scan(params, items = []) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            let allItems = items;\n\n            if (result.Items) {\n                allItems = items.concat(result.Items);\n            }\n            if (result.LastEvaluatedKey){\n                console.log(\"Rescanning with next page\");\n                params.ExclusiveStartKey = result.LastEvaluatedKey;\n                return this.scan(params, allItems);\n            } else {\n                return allItems;\n            }\n        });\n    }\n\n    queryWithNext(params) {\n      params[\"TableName\"] = this.tableName;\n      return this.client.query(params).promise().then(result => {\n        let data = {\n          data: result.Items || []\n        };\n        if(result.LastEvaluatedKey) {\n          data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n        }\n        return data;\n      });\n    }\n\n    scanWithNext(params) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.scan(params).promise().then(result => {\n            let data = {\n                data: result.Items || []\n            };\n            if(result.LastEvaluatedKey) {\n                data.next = Buffer.from(JSON.stringify(result.LastEvaluatedKey), 'utf8').toString('base64');\n            }\n            return data;\n        });\n    }\n\n    /**\n     * @param params\n     * @param callback\n     * @returns {Promise<DocumentClient.AttributeMap | null>}\n     */\n    getItem(params, callback) {\n        params[\"TableName\"] = this.tableName;\n        return this.client.get(params).promise().then(result => result.Item || null);\n    }\n\n    batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            this._batchWrite(batch, startingIndex).then(result => {\n                if (batch.length > result.index) {\n                    this.batchWrite(batch, result.index).then(nextData => {\n                        resolve(nextData);\n                    });\n                } else {\n                    resolve(result.data);\n                }\n            });\n        });\n    }\n\n    _batchWrite(batch, startingIndex) {\n        return new Promise((resolve, reject) => {\n            // DDB has a limit of 25 items at once\n            let maxDdbUpdate = 24;\n            let endIndex = (batch.length > startingIndex + maxDdbUpdate) ? startingIndex + maxDdbUpdate : batch.length;\n            let batchToUpdate = batch.slice(startingIndex, endIndex);\n\n            let batchParam = {\n                RequestItems: {\n                    [this.tableName]: batchToUpdate\n                }\n            };\n            this.client.batchWrite(batchParam, (err, data) => {\n                if (err) {\n                    console.log(\"Any error? \" + JSON.stringify(err, null, 2));\n                }\n                resolve({'index': startingIndex + maxDdbUpdate, 'data': data});\n            });\n        });\n    }\n}\n\nexport {DynamoDBService};","module.exports = require(\"node-fetch\");","module.exports = require(\"https\");"],"sourceRoot":""}